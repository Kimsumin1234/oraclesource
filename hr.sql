-- employees 에서 전체 내용 조회
SELECT *
FROM EMPLOYEES e ;

-- first_name, last_name, job_id 조회
SELECT
	first_name,
	last_name,
	job_id
FROM
	EMPLOYEES e ;





-- 사원번호가 176인 사람의 LAST_NAME 과 DEPARTMENT_ID 조회
SELECT LAST_NAME, DEPARTMENT_ID
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID = 176;


-- 연봉이 12000 이상 되는 직원들의 LAST_NAME 과 SALARY 조회
SELECT LAST_NAME, SALARY
FROM EMPLOYEES e 
WHERE SALARY >= 12000;


-- 연봉이 5000 에서 12000의 범위 이외인 사람들의 LAST_NAME 과 SALARY 조회
SELECT LAST_NAME, SALARY
FROM EMPLOYEES e 
WHERE SALARY < 5000 or SALARY > 12000;





-- 부서번호가 20, 50 부서에서 근무하는 사원들의 LAST_NAME, DEPARTMENT_ID 조회
SELECT LAST_NAME, DEPARTMENT_ID
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID = 20 OR DEPARTMENT_ID = 50;

--IN, last_name, department_id 오름차순
SELECT LAST_NAME, DEPARTMENT_ID
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN (20,50)
ORDER BY LAST_NAME ASC, DEPARTMENT_ID ASC;

-- 커미션을 버는 모든 사원들의 LAST_NAME, SALARY, COMMISSION_PCT 조회
SELECT LAST_NAME, SALARY, COMMISSION_PCT 
FROM EMPLOYEES e 
WHERE COMMISSION_PCT  > 0
ORDER BY SALARY DESC, COMMISSION_PCT DESC;

-- SALARY 가 2500, 3500, 7000 이 아니며 JOB 이 SA_REP 나 ST_CLERK 사원 조회
SELECT *
FROM EMPLOYEES e 
WHERE SALARY != 2500 AND SALARY != 3500 AND SALARY != 7000 AND (JOB_ID = 'SA_REP' OR JOB_ID = 'ST_CLERK');

SELECT *
FROM EMPLOYEES e 
WHERE SALARY NOT IN (2500,3500,7000) AND JOB_ID IN ('SA_REP','ST_CLERK');



-- 2017-01-01 ~ 2017-12-31 사이에 고용된 사원들의 LAST_NAME, EMPLOYEE_ID, HIRE_DATE 조회
-- HIRE_DATE 내림차순 정렬
SELECT LAST_NAME, EMPLOYEE_ID, HIRE_DATE
FROM EMPLOYEES e 
WHERE HIRE_DATE >= '2017-01-01' AND HIRE_DATE <= '2017-12-31'
ORDER BY HIRE_DATE DESC;

-- 부서번호가 20, 50 부서에서 근무하고, 연봉이 5000 ~ 12000 사이인 사원들의 LAST_NAME, SALARY 조회
-- SALARY 오름차순
SELECT LAST_NAME, SALARY
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID  IN (20,50) AND SALARY BETWEEN 5000 AND 12000
ORDER BY SALARY ASC;

-- 2017-01-01 ~ 2017-12-31 사이에 고용된 사원들의 LAST_NAME, EMPLOYEE_ID, HIRE_DATE 조회
-- HIRE_DATE 내림차순 정렬
SELECT LAST_NAME, EMPLOYEE_ID, HIRE_DATE
FROM EMPLOYEES e 
WHERE HIRE_DATE BETWEEN '2017-01-01' AND '2017-12-31'
ORDER BY HIRE_DATE DESC;

-- 연봉이 5000 에서 12000의 범위 이외인 사람들의 LAST_NAME 과 SALARY 조회
SELECT LAST_NAME, SALARY
FROM EMPLOYEES e 
WHERE SALARY NOT BETWEEN 5000 AND 12000;


-- LAST_NAME 에 u 가 포함되는 사원들의 사번, last_name 조회
SELECT LAST_NAME, EMPLOYEE_ID 
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '%u%';

-- LAST_NAME 의 4번째 문자가 a 인 사원들의 사번, last_name 조회
SELECT LAST_NAME, EMPLOYEE_ID 
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '___a%';

-- LAST_NAME 의 a 혹은 e 글자가 들어있는 사원들의 사번, last_name 조회 후 last_name 오름차순 조회
SELECT LAST_NAME, EMPLOYEE_ID 
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '%a%' OR LAST_NAME LIKE '%e%'
ORDER BY LAST_NAME ASC;


-- LAST_NAME 의 a 와 e 글자가 들어있는 사원들의 사번, last_name 조회 후 last_name 오름차순 조회
SELECT LAST_NAME, EMPLOYEE_ID 
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '%a%e%' OR LAST_NAME LIKE '%e%a%'
ORDER BY LAST_NAME ASC;


--
SELECT *
FROM EMPLOYEES e;

-- 매니저가 없는 사람들의 LAST_NAME, JOB_ID 조회
SELECT LAST_NAME, JOB_ID
FROM EMPLOYEES e 
WHERE MANAGER_ID IS NOT NULL ;

-- ST_CLERK 인 JOB_ID를 가진 사원이 없는 부서 ID 조회(단, 부서번호가 NULL인 사원 제외)
-- 중복 번호 제외
SELECT DISTINCT DEPARTMENT_ID
FROM EMPLOYEES e 
WHERE 'ST_CLERK' <> JOB_ID AND DEPARTMENT_ID IS NOT NULL ;

-- COMMISSION_PCT 가 NULL 이 아닌 사원들 중에서 COMMISSION = SALARY * COMMISSION_PCT
-- 를 구하여 EMPLOYEE_ID, FIRST_NAME, JOB_ID, COMMISSION 을 조회
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY * COMMISSION_PCT AS COMMISSION
FROM EMPLOYEES e 
WHERE COMMISSION_PCT IS NOT NULL ;

-- NULL * 숫자 = NULL
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY, COMMISSION_PCT, SALARY * COMMISSION_PCT AS COMMISSION
FROM EMPLOYEES e ;


-- FIRST_NAME 이 'Curtis' 인 사원의 FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, JOB_ID 를
-- 조회한다. 단 JOB_ID 결과는 소문자로 출력한다
SELECT FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER , LOWER(JOB_ID) 
FROM EMPLOYEES e 
WHERE FIRST_NAME = 'Curtis';

-- 부서번호가 60, 70, 80, 90 인 사원들의 EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID 를 조회
-- 단, JOB_ID가 IT_PROG 인 사원의 경우 프로그래머로 변경하여 출력한다
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, REPLACE (JOB_ID, 'IT_PROG', '프로그래머')
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN (60,70,80,90);

-- JOB_ID 가 AD_PRES, PU_CLERK, 인 사원들의 EMPLOYEE_ID, FIRST_NAME, JOB_ID 조회
-- 단, 사원명은 FIRST_NAME 과 LAST_NAME 을 공백을 포함하여 연결
-- 'ABC' 'DEF' => 'ABC DEF'
SELECT EMPLOYEE_ID, FIRST_NAME || ' ' || LAST_NAME AS NAME , JOB_ID
FROM EMPLOYEES e 
WHERE JOB_ID IN ('AD_PRES','PU_CLERK');


-- (실습4) 부서 80의 각 사원에 대해 적용 가능한 세율을 표시하시오.
SELECT
	LAST_NAME ,
	SALARY ,
	CASE
		TRUNC(SALARY / 2000, 0) 
		WHEN 0 THEN '0%'
		WHEN 1 THEN '9%'
		WHEN 2 THEN '20%'
		WHEN 3 THEN '30%'
		WHEN 4 THEN '40%'
		WHEN 5 THEN '42%'
		WHEN 6 THEN '44%'
		ELSE '45%'
	END AS TAX_RATE
FROM
	EMPLOYEES e
WHERE
	DEPARTMENT_ID = 80;
	

-- 최대연봉 - 최소연봉 차이 조회
SELECT MAX(SALARY) - MIN(SALARY) AS GAP
FROM EMPLOYEES e ;

-- 매니저로 근무하는 사원들의 총 수 조회(매니저번호 중복 제거)
SELECT COUNT(DISTINCT MANAGER_ID) 
FROM EMPLOYEES e ;

-- 부서별 직원 수 구하기(부서번호의 오름차순 출력)
SELECT DEPARTMENT_ID ,COUNT(DEPARTMENT_ID) 
FROM EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
ORDER BY DEPARTMENT_ID ;
-- 부서별 평균 급여
SELECT DEPARTMENT_ID ,ROUND(AVG(SALARY))  
FROM EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
ORDER BY DEPARTMENT_ID ;
-- 동일한 직무(JOB_ID)를 가진 사원들의 총 수 조회
SELECT JOB_ID  ,COUNT(EMPLOYEE_ID) 
FROM EMPLOYEES e 
GROUP BY JOB_ID 
ORDER BY JOB_ID  ;

-- 매니저가 관리하는 사원들 중에서 최소급여 조회
SELECT MANAGER_ID ,MIN(SALARY) 
FROM EMPLOYEES e 
GROUP BY MANAGER_ID
ORDER BY MANAGER_ID ;
-- 매니저가 관리하는 사원들 중에서 최소급여가 6000 미만인 최소급여는 제외
SELECT MANAGER_ID ,MIN(SALARY) 
FROM EMPLOYEES e 
GROUP BY MANAGER_ID HAVING MIN(SALARY) >= 6000 
ORDER BY MANAGER_ID ;
-- 매니저가 없는 사원 제외
SELECT MANAGER_ID ,MIN(SALARY) 
FROM EMPLOYEES e 
WHERE MANAGER_ID IS NOT NULL
GROUP BY MANAGER_ID
ORDER BY MANAGER_ID ;






-- 자신의 담당 매니저의 고용일보다 빠른 입사자 찾기
SELECT
	E.EMPLOYEE_ID AS 내사원번호,
	E.HIRE_DATE AS 내입사일,
	E.LAST_NAME AS 내이름,
	E.MANAGER_ID AS 매니저번호,
	E2.HIRE_DATE AS 매니저입사일
FROM
	EMPLOYEES e
JOIN EMPLOYEES e2 ON
	E.MANAGER_ID = E2.EMPLOYEE_ID AND E.HIRE_DATE < E2.HIRE_DATE  ;

-- 도시 이름이 T로 시작하는 지역에 사는 사원들의 사번, LAST_NAME, 부서번호 조회
-- (도시명을 LOCATIONS 테이블에 )
SELECT
	E.EMPLOYEE_ID ,E.LAST_NAME ,D.DEPARTMENT_ID , L.CITY 
FROM
	DEPARTMENTS d
JOIN LOCATIONS l ON
	D.LOCATION_ID = L.LOCATION_ID
JOIN EMPLOYEES e ON
	D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE SUBSTR(CITY,1,1) = 'T';

SELECT
	E.EMPLOYEE_ID ,E.LAST_NAME ,D.DEPARTMENT_ID , L.CITY 
FROM
	DEPARTMENTS d
JOIN LOCATIONS l ON
	D.LOCATION_ID = L.LOCATION_ID
JOIN EMPLOYEES e ON
	D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE L.CITY LIKE 'T%' ;

-- 위치 아이디가 1700인 사원들의 LAST_NAME, 부서번호, 연봉 조회
SELECT
	E.LAST_NAME ,D.DEPARTMENT_ID ,E.SALARY  
FROM
	DEPARTMENTS d
JOIN EMPLOYEES e ON
	D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE D.LOCATION_ID = '1700' ;

-- 부서명, 위치ID, 각부서별 사원 수, 각 부서별 평균 연봉조회
-- (평균 연봉은 소수점 2자리까지만 표현)
SELECT
	D.DEPARTMENT_ID ,
	D.LOCATION_ID ,
	COUNT(E.EMPLOYEE_ID) ,
	ROUND(AVG(E.SALARY), 2)
FROM
	DEPARTMENTS d
JOIN EMPLOYEES e ON
	D.DEPARTMENT_ID = E.DEPARTMENT_ID
GROUP BY
	D.DEPARTMENT_ID ,
	D.LOCATION_ID
ORDER BY
	D.LOCATION_ID ;
-- EXECUTIVE 부서에 근무하는 사원들의 부서번호, LAST_NAME, JOB_ID 조회
SELECT D.DEPARTMENT_ID ,E.LAST_NAME ,E.JOB_ID 
FROM
	DEPARTMENTS d
JOIN EMPLOYEES e ON
	D.DEPARTMENT_ID = E.DEPARTMENT_ID AND D.DEPARTMENT_NAME = 'Executive' ;
-- 각 부서별 소속 부서에서 자신보다 늦게 고용되었으나 많은 연봉을 받는 사원이 존재하는
-- 사원들의 이름조회 (FIRST_NAME과 LAST_NAME 을 결합하여 하나로 나오게 하기)
-- 부서번호, 결합된 이름, SALARY, HIRE_DATE 출력
SELECT
	DISTINCT E.DEPARTMENT_ID AS 부서번호,
	E.FIRST_NAME || ' ' || E.LAST_NAME AS 내이름,
	E.SALARY AS 내급여,
	E.HIRE_DATE AS 내입사일
FROM
	EMPLOYEES e
JOIN EMPLOYEES e2 ON
	E.DEPARTMENT_ID = E2.DEPARTMENT_ID
	AND E.SALARY < E2.SALARY
	AND E.HIRE_DATE < E2.HIRE_DATE ;
	